#!/usr/bin/env ruby

require "./lib/off-call"
require "terminal-table"

ENV.source ".env"
ENV["TZ"] = "UTC"

OffCall::PagerDuty.connect(ENV["PAGERDUTY_SUBDOMAIN"], ENV["PAGERDUTY_USER"], ENV["PAGERDUTY_PASSWORD"])

SERVICES  = ENV["SERVICES"].split(",") || abort("Must provide SERVICES=PXXXXXX,PYYYYYY")
SINCE     = ENV["SINCE"].to_time rescue "Last Week".to_time
UNTIL     = ENV["UNTIL"].to_time rescue "Now".to_time

incidents = []
SERVICES.each do |service_id|
  s = OffCall::PagerDuty::Service.new(service_id)
  incidents += s.incidents(since: SINCE, until: UNTIL)
end

subjects  = {}
resolvers = {}
hours     = Hash[(0..23).zip [0]*24]
days      = Hash[%w(Mon Tue Wed Thu Fri Sat Sun ).zip [0]*7]

incidents.each do |i|
  # normalize instance-type-id/Service
  k = ((i["trigger_summary_data"] && i["trigger_summary_data"]["subject"]) || i["incident_key"]).
        gsub(/^([a-z_-]+)-([0-9]+)(.(?:heroku|heroku-b|ops.herokai)?.com)\/([^:]+)/, "\\1-XXXXX\\3/\\4").
        gsub(/^(canary:) (\w+) (\w+) (\d+)/, "\\1 \\2 \\3 N").
        trunc(90)
  subjects[k] ||= 0
  subjects[k]  += 1

  k = i["last_status_change_by"]["name"] rescue "Nobody"
  resolvers[k] ||= 0
  resolvers[k]  += 1

  k = i["last_status_change_on"].to_time.hour
  hours[k] ||= 0
  hours[k]  += 1

  k = i["last_status_change_on"].to_time.strftime("%a")
  days[k] ||= 0
  days[k]  += 1
end

alerts = OffCall::PagerDuty.alerts(since: SINCE, until: UNTIL)
users = {}
sms_by_hour = Hash[(0..23).zip [0]*24]

alerts.each do |alert|
  userid = alert["user"]["id"]
  users[userid] ||= alert["user"]
  users[userid]["num_sms"] ||= 0

  if alert["type"] == "SMS"
    users[userid]["num_sms"] += 1
  end
end

puts "# Summary for #{SERVICES.join(",")} from #{SINCE} to #{UNTIL}"
puts

puts
puts "## Incident types by frequency"
puts

Terminal::Table.new do |t|
  t.headings = "Subject", "Count"
  t.rows     = subjects.sort { |a,b| b[1]<=>a[1] }
  t << :separator  
  t << ["TOTAL", subjects.inject(0) { |s,h| s += h[1] } ]
  puts t
end

puts
puts "## Alerts by person"
puts

Terminal::Table.new do |t|
  t.headings = "User", "SMS count"

  smscount = []
  users.each do |userid,user|
    next unless user["num_sms"] > 0
    smscount << [user["name"], user["num_sms"]]
  end
  
  t.rows     = smscount.sort { |a,b| b[1]<=>a[1] }
  t << :separator  
  t << ["TOTAL", smscount.inject(0) { |s,h| s += h[1] } ]

  puts t
end

puts
puts "## Incidents resolved by person"
puts

Terminal::Table.new do |t|
  t.headings = "Resolved By", "Count"
  t.rows     = resolvers.sort { |a,b| b[1]<=>a[1] }
  puts t
end

puts
puts "## Incidents by hour"
puts

Terminal::Table.new do |t|
  t.headings = "Hour", "Count"

  hours.each do |k,v|
    t << :separator if [3, 15].include? k # 8 PM and 8 AM PDT
    t << [k,v]
  end

  puts t
end

puts
puts "## Incidents by day"
puts

Terminal::Table.new do |t|
  t.headings = "Day", "Count"

 days.each do |k,v|
    t << [k,v]
    t << :separator if k == "Fri"
  end

  puts t
end
